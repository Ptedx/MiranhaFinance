generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  passwordHash       String?
  webauthnChallenge  String?
  currency           String    @default("USD")
  timezone           String    @default("UTC")
  locale             String    @default("en-US")
  theme              String    @default("system")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  // Finance relations
  finAccounts  FinAccount[]
  categories   Category[]
  transactions Transaction[]
  rules        Rule[]
  budgets      Budget[]
  goals        Goal[]
  holdings     InvestmentHolding[]
  notifications Notification[]

  // Auth relations (NextAuth)
  sessions  Session[]
  accounts  Account[]
  passkeys  WebAuthnCredential[]
}

model Institution {
  id        String   @id @default(cuid())
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  finAccounts FinAccount[]
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  BROKERAGE
  CRYPTO
}

model FinAccount {
  id             String       @id @default(cuid())
  userId         String
  institutionId  String?
  type           AccountType
  name           String
  currency       String       @default("USD")
  balance        Decimal      @default(0)
  closedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  user        User        @relation(fields: [userId], references: [id])
  institution Institution? @relation(fields: [institutionId], references: [id])
  transactions Transaction[]
  goals        Goal[]
}

model Category {
  id        String    @id @default(cuid())
  userId    String
  name      String
  color     String?
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  txns      Transaction[] @relation("TxnCategory")
  subtxns   Transaction[] @relation("TxnSubcategory")
}

enum TxnStatus {
  PENDING
  POSTED
}

model Transaction {
  id              String    @id @default(cuid())
  userId          String
  accountId       String
  date            DateTime
  amount          Decimal
  currency        String    @default("USD")
  description     String
  notes           String?
  categoryId      String?
  subcategoryId   String?
  tags            String[]
  status          TxnStatus @default(POSTED)
  counterpart     String?
  transferGroupId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  user        User      @relation(fields: [userId], references: [id])
  account     FinAccount   @relation(fields: [accountId], references: [id])
  category    Category? @relation("TxnCategory", fields: [categoryId], references: [id])
  subcategory Category? @relation("TxnSubcategory", fields: [subcategoryId], references: [id])
  attachments Attachment[]

  @@index([date])
  @@index([categoryId])
  @@index([accountId])
}

model Rule {
  id        String   @id @default(cuid())
  userId    String
  name      String?
  priority  Int      @default(0)
  criteria  Json
  action    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// NextAuth (Auth.js) Prisma Adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Passkeys (WebAuthn)
model WebAuthnCredential {
  id           String   @id @default(cuid())
  userId       String
  credentialId String   @unique
  publicKey    String
  counter      Int      @default(0)
  transports   String?
  deviceType   String?
  backedUp     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Budgets
model Budget {
  id        String  @id @default(cuid())
  userId    String
  period    String // e.g., 2025-10 or year:2025
  allocations Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// Goals
model Goal {
  id            String   @id @default(cuid())
  userId        String
  name          String
  targetAmount  Decimal
  targetDate    DateTime?
  currentAmount Decimal   @default(0)
  accountId     String?
  recurrence    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user    User       @relation(fields: [userId], references: [id])
  account FinAccount? @relation(fields: [accountId], references: [id])
}

// Investments
model InvestmentHolding {
  id       String  @id @default(cuid())
  userId   String
  brokerId String?
  assetId  String
  qty      Decimal @default(0)
  avgPrice Decimal @default(0)
  currency String  @default("USD")

  user  User  @relation(fields: [userId], references: [id])
  asset Asset @relation(fields: [assetId], references: [id])
}

model Asset {
  id       String   @id @default(cuid())
  symbol   String   @unique
  name     String
  class    String
  currency String   @default("USD")
  prices   Price[]
  holdings InvestmentHolding[]
}

model Price {
  id      String   @id @default(cuid())
  assetId String
  date    DateTime
  close   Decimal

  asset Asset @relation(fields: [assetId], references: [id])

  @@unique([assetId, date])
}

model Attachment {
  id     String  @id @default(cuid())
  txnId  String
  url    String
  type   String
  txn    Transaction @relation(fields: [txnId], references: [id], onDelete: Cascade)
}

model Notification {
  id       String   @id @default(cuid())
  userId   String
  type     String
  channel  String
  payload  Json
  sentAt   DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
